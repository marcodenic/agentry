// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/agent.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentHub_Spawn_FullMethodName       = "/api.AgentHub/Spawn"
	AgentHub_SendMessage_FullMethodName = "/api.AgentHub/SendMessage"
	AgentHub_Trace_FullMethodName       = "/api.AgentHub/Trace"
)

// AgentHubClient is the client API for AgentHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentHubClient interface {
	Spawn(ctx context.Context, in *SpawnRequest, opts ...grpc.CallOption) (*SpawnResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*Ack, error)
	Trace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (AgentHub_TraceClient, error)
}

type agentHubClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentHubClient(cc grpc.ClientConnInterface) AgentHubClient {
	return &agentHubClient{cc}
}

func (c *agentHubClient) Spawn(ctx context.Context, in *SpawnRequest, opts ...grpc.CallOption) (*SpawnResponse, error) {
	out := new(SpawnResponse)
	err := c.cc.Invoke(ctx, AgentHub_Spawn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentHubClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, AgentHub_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentHubClient) Trace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (AgentHub_TraceClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentHub_ServiceDesc.Streams[0], AgentHub_Trace_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentHubTraceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentHub_TraceClient interface {
	Recv() (*TraceEvent, error)
	grpc.ClientStream
}

type agentHubTraceClient struct {
	grpc.ClientStream
}

func (x *agentHubTraceClient) Recv() (*TraceEvent, error) {
	m := new(TraceEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentHubServer is the server API for AgentHub service.
// All implementations must embed UnimplementedAgentHubServer
// for forward compatibility
type AgentHubServer interface {
	Spawn(context.Context, *SpawnRequest) (*SpawnResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*Ack, error)
	Trace(*TraceRequest, AgentHub_TraceServer) error
	mustEmbedUnimplementedAgentHubServer()
}

// UnimplementedAgentHubServer must be embedded to have forward compatible implementations.
type UnimplementedAgentHubServer struct {
}

func (UnimplementedAgentHubServer) Spawn(context.Context, *SpawnRequest) (*SpawnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spawn not implemented")
}
func (UnimplementedAgentHubServer) SendMessage(context.Context, *SendMessageRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedAgentHubServer) Trace(*TraceRequest, AgentHub_TraceServer) error {
	return status.Errorf(codes.Unimplemented, "method Trace not implemented")
}
func (UnimplementedAgentHubServer) mustEmbedUnimplementedAgentHubServer() {}

// UnsafeAgentHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentHubServer will
// result in compilation errors.
type UnsafeAgentHubServer interface {
	mustEmbedUnimplementedAgentHubServer()
}

func RegisterAgentHubServer(s grpc.ServiceRegistrar, srv AgentHubServer) {
	s.RegisterService(&AgentHub_ServiceDesc, srv)
}

func _AgentHub_Spawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpawnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentHubServer).Spawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentHub_Spawn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentHubServer).Spawn(ctx, req.(*SpawnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentHub_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentHubServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentHub_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentHubServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentHub_Trace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TraceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentHubServer).Trace(m, &agentHubTraceServer{stream})
}

type AgentHub_TraceServer interface {
	Send(*TraceEvent) error
	grpc.ServerStream
}

type agentHubTraceServer struct {
	grpc.ServerStream
}

func (x *agentHubTraceServer) Send(m *TraceEvent) error {
	return x.ServerStream.SendMsg(m)
}

// AgentHub_ServiceDesc is the grpc.ServiceDesc for AgentHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AgentHub",
	HandlerType: (*AgentHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Spawn",
			Handler:    _AgentHub_Spawn_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _AgentHub_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Trace",
			Handler:       _AgentHub_Trace_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/agent.proto",
}

const (
	AgentNode_Spawn_FullMethodName       = "/api.AgentNode/Spawn"
	AgentNode_SendMessage_FullMethodName = "/api.AgentNode/SendMessage"
	AgentNode_Trace_FullMethodName       = "/api.AgentNode/Trace"
)

// AgentNodeClient is the client API for AgentNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentNodeClient interface {
	Spawn(ctx context.Context, in *SpawnRequest, opts ...grpc.CallOption) (*SpawnResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*Ack, error)
	Trace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (AgentNode_TraceClient, error)
}

type agentNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentNodeClient(cc grpc.ClientConnInterface) AgentNodeClient {
	return &agentNodeClient{cc}
}

func (c *agentNodeClient) Spawn(ctx context.Context, in *SpawnRequest, opts ...grpc.CallOption) (*SpawnResponse, error) {
	out := new(SpawnResponse)
	err := c.cc.Invoke(ctx, AgentNode_Spawn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentNodeClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, AgentNode_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentNodeClient) Trace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (AgentNode_TraceClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentNode_ServiceDesc.Streams[0], AgentNode_Trace_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentNodeTraceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentNode_TraceClient interface {
	Recv() (*TraceEvent, error)
	grpc.ClientStream
}

type agentNodeTraceClient struct {
	grpc.ClientStream
}

func (x *agentNodeTraceClient) Recv() (*TraceEvent, error) {
	m := new(TraceEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentNodeServer is the server API for AgentNode service.
// All implementations must embed UnimplementedAgentNodeServer
// for forward compatibility
type AgentNodeServer interface {
	Spawn(context.Context, *SpawnRequest) (*SpawnResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*Ack, error)
	Trace(*TraceRequest, AgentNode_TraceServer) error
	mustEmbedUnimplementedAgentNodeServer()
}

// UnimplementedAgentNodeServer must be embedded to have forward compatible implementations.
type UnimplementedAgentNodeServer struct {
}

func (UnimplementedAgentNodeServer) Spawn(context.Context, *SpawnRequest) (*SpawnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spawn not implemented")
}
func (UnimplementedAgentNodeServer) SendMessage(context.Context, *SendMessageRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedAgentNodeServer) Trace(*TraceRequest, AgentNode_TraceServer) error {
	return status.Errorf(codes.Unimplemented, "method Trace not implemented")
}
func (UnimplementedAgentNodeServer) mustEmbedUnimplementedAgentNodeServer() {}

// UnsafeAgentNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentNodeServer will
// result in compilation errors.
type UnsafeAgentNodeServer interface {
	mustEmbedUnimplementedAgentNodeServer()
}

func RegisterAgentNodeServer(s grpc.ServiceRegistrar, srv AgentNodeServer) {
	s.RegisterService(&AgentNode_ServiceDesc, srv)
}

func _AgentNode_Spawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpawnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentNodeServer).Spawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentNode_Spawn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentNodeServer).Spawn(ctx, req.(*SpawnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentNode_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentNodeServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentNode_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentNodeServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentNode_Trace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TraceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentNodeServer).Trace(m, &agentNodeTraceServer{stream})
}

type AgentNode_TraceServer interface {
	Send(*TraceEvent) error
	grpc.ServerStream
}

type agentNodeTraceServer struct {
	grpc.ServerStream
}

func (x *agentNodeTraceServer) Send(m *TraceEvent) error {
	return x.ServerStream.SendMsg(m)
}

// AgentNode_ServiceDesc is the grpc.ServiceDesc for AgentNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AgentNode",
	HandlerType: (*AgentNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Spawn",
			Handler:    _AgentNode_Spawn_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _AgentNode_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Trace",
			Handler:       _AgentNode_Trace_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/agent.proto",
}
